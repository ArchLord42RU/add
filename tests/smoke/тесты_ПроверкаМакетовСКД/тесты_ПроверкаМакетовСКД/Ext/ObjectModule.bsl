Перем КонтекстЯдра;
Перем Утверждения;

#Область Основные_процедуры_теста

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
		
	ОписаниеОбъектов = Новый Структура;
	ОписаниеОбъектов.Вставить("Справочники", "Справочник");
	ОписаниеОбъектов.Вставить("Документы", "Документ");
	ОписаниеОбъектов.Вставить("Отчеты", "Отчет");
	ОписаниеОбъектов.Вставить("Обработки", "Обработка");
	
	Для Каждого КиЗ ИЗ ОписаниеОбъектов Цикл
		
		мНаборов = Новый Массив;
		
		Для Каждого ТекОбработка ИЗ Метаданные[КиЗ.Ключ] Цикл
			
			Для Каждого ТекДанныеМакета ИЗ ТекОбработка.Макеты Цикл
				
				Если ТекДанныеМакета.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
					Продолжить;
				КонецЕсли;
				
				мНаборов.Добавить(
					Новый Структура("ИмяПроцедуры, Параметры, Представление",
						"ТестДолжен_ПроверитьМакетСКД",
						НаборТестов.ПараметрыТеста(КиЗ.Значение, ТекОбработка.Имя, ТекДанныеМакета.Имя),
						СтрШаблон("%1: %2", ТекОбработка.Имя, ТекДанныеМакета.Имя)));
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если мНаборов.Количество() > 0 Тогда
			
			НаборТестов.НачатьГруппу(КиЗ.Ключ, Ложь);
			
			Для Каждого Набор ИЗ мНаборов Цикл
				
				НаборТестов.Добавить(Набор.ИмяПроцедуры, Набор.Параметры, Набор.Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область События_юнит_тестирования

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ТестДолжен_ПроверитьМакетСКД(ИмяМенеджера, ИмяОбьекта, ИмяМакета) Экспорт
	
	Менеджер = МенеджерОбьектаПоИмени(ИмяМенеджера);
	
	СхемаКомпоновкиДанных = Менеджер[ИмяОбьекта].ПолучитьМакет(СокрЛП(ИмяМакета));
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//Тут проходит синтаксический анализ запроса.
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
КонецПроцедуры

Функция МенеджерОбьектаПоИмени(Знач ИмяМенеджера)
	
	ИмяМенеджера = ВРЕГ(ИмяМенеджера);
	
	Менеджер = Неопределено;
	
	Если ИмяМенеджера = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ИмяМенеджера = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ИмяМенеджера = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ИмяМенеджера = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ИмяМенеджера = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ИмяМенеджера = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ИмяМенеджера = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ИмяМенеджера = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ИмяМенеджера = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ИмяМенеджера = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ИмяМенеджера = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ИмяМенеджера = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ИмяМенеджера = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ИмяМенеджера = "РЕГИСТРРАСЧЕТА" Тогда
		Менеджер = РегистрыРасчета;
		
	ИначеЕсли ИмяМенеджера = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ИмяМенеджера = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ИмяМенеджера = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ИмяМенеджера = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Возврат Менеджер;
КонецФункции

